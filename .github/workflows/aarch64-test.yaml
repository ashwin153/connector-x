name: aarch64-test

on:
  workflow_dispatch:

jobs:
  linux-aarch:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [[39, "3.9"], [310, "3.10"], [311, "3.11"], [312, "3.12"]]
    steps:
      - uses: actions/checkout@v4

      - name: Set python version
        run: |
          echo "/opt/python/cp${{ matrix.python-version[0] }}-cp${{ matrix.python-version[0] }}/bin" >> $GITHUB_PATH

      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: rustfmt
          target: aarch64-unknown-linux-gnu
          default: true
          
      - name: Setup QEMU
        uses: docker/setup-qemu-action@v1
  
      - uses: extractions/setup-just@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - uses: Gr1N/setup-poetry@v9

      - name: Install tools
        run: |
          sudo apt-get update -y
          sudo apt-get install -y mysql-server postgresql freetds-dev libkrb5-dev clang

      - name: Setup project
        run: |
          just bootstrap-python

      - uses: PyO3/maturin-action@v1
        with:
          rust-toolchain: stable
          container: ghcr.io/rust-cross/manylinux_2_28-cross:aarch64	
          command: build
          args: -m connectorx-python/Cargo.toml -i python --release --target aarch64-unknown-linux-gnu --manylinux 2_28 --features integrated-auth-gssapi
          before-script-linux: |
            # If we're running on rhel centos, install needed packages.
            if command -v yum &> /dev/null; then
                yum update -y && yum install -y perl-core openssl openssl-devel pkgconfig libatomic

                # If we're running on i686 we need to symlink libatomic
                # in order to build openssl with -latomic flag.
                if [[ ! -d "/usr/lib64" ]]; then
                    ln -s /usr/lib/libatomic.so.1 /usr/lib/libatomic.so
                fi
            else
                # If we're running on debian-based system.
                apt update -y && apt-get install -y libssl-dev openssl pkg-config
            fi
        env:
          SQLITE3_STATIC: 1

      - name: Copy j4rs dependencies into dist
        run: |
          cp -rf connectorx-python/target/release/jassets connectorx-python/connectorx/dependencies

      # rebuild the wheel to incorporate j4rs dependencies
      - uses: PyO3/maturin-action@v1
        with:
          rust-toolchain: stable
          container: ghcr.io/rust-cross/manylinux_2_28-cross:aarch64	
          command: build
          args: -m connectorx-python/Cargo.toml -i python --release --target aarch64-unknown-linux-gnu --manylinux 2_28 --features integrated-auth-gssapi
          before-script-linux: |
            # If we're running on rhel centos, install needed packages.
            if command -v yum &> /dev/null; then
                yum update -y && yum install -y perl-core openssl openssl-devel pkgconfig libatomic

                # If we're running on i686 we need to symlink libatomic
                # in order to build openssl with -latomic flag.
                if [[ ! -d "/usr/lib64" ]]; then
                    ln -s /usr/lib/libatomic.so.1 /usr/lib/libatomic.so
                fi
            else
                # If we're running on debian-based system.
                apt update -y && apt-get install -y libssl-dev openssl pkg-config
            fi
        env:
          SQLITE3_STATIC: 1

      - uses: actions/upload-artifact@v4
        with:
          name: "ubuntu-latest-${{ matrix.python-version[1] }}"
          path: connectorx-python/target/wheels/*.whl
